* Chapter 1
** 1.2
     
#+BEGIN_SRC scheme
  (/ (+ 5 4
        (- 2
           (- 3
              (+ 6 (/ 4 5)))))
     (* 3 (- 6 2) (- 2 7)))
#+END_SRC

#+RESULTS:
: -37/150

** 1.3

#+BEGIN_SRC scheme
  (define (sum-squares-largests-two a b c)
    (if (> a b)
        (if (> b c)
            (+ (* a a) (* b b))
            (+ (* a a) (* c c)))
        (if (> a c)
            (+ (* b b) (* a a))
            (+ (* b b) (* c c)))))

  (sum-squares-largests-two 2 3 1)
#+END_SRC

#+RESULTS:
: 13

** 1.7

#+BEGIN_SRC scheme
  (define (sqrt-iter guess x last-guess)
    (if (good-enough? guess last-guess)
        guess
        (sqrt-iter (improve guess x) x guess)))


  (define (improve guess x)
    (average guess (/ x guess)))

  (define (average x y)
    (/ (+ x y) 2))

  (define (good-enough? guess last-guess)
    (< (/ (abs (- guess last-guess)) guess)
       0.0001))

  (define (sqrt x)
    (sqrt-iter 1.0 x 2.0))

  (sqrt 81.0)
#+END_SRC

#+RESULTS:
: 9.000000000007091
** 1.8

#+BEGIN_SRC scheme
  (define (average x y)
    (/ (+ x y) 2))

  (define (cbrt x)
    (define (cbrt-iter guess last-guess)
      (if (good-enough? guess last-guess)
          guess
          (cbrt-iter (improve guess) guess)))
    (define (improve guess)
      (/ (+ (/ x (* guess guess)) (* 2 guess))
         3))
    (define (good-enough? guess last-guess)
      (< (/ (abs (- guess last-guess)) guess)
         0.0001))
    (cbrt-iter 1.0 2.0))

  (cbrt 27)

#+END_SRC

#+RESULTS:
: 3.0000000000000977
** 1.10

#+BEGIN_SRC scheme
  (A 1 3)
  (A 0 (A 1 2))
  (A 0 (A 0 (A 1 1)))
  (A 0 (A 0 2))
  (A 0 4)

  (A 2 4)
  (A 1 (A 2 3))
  (A 1 (A 1 (A 2 2)))
  (A 1 (A 1 (A 1 (A 2 1))))
  (A 1 (A 1 (A 1 2)))
  (A 1 (A 1 4))
  (A 1 16)
#+END_SRC

** 1.11 

#+BEGIN_SRC scheme
;; recursive
  (define (recur-f n)
    (if (< n 3)
        n
        (+ (recur-f (- n 1))
           (* 2 (recur-f (- n 2)))
           (* 3 (recur-f (- n 3))))))

;; iterative
(define (f n)
  (define (iter-f n last1 last2 last3 count)
    (if (> count n)
        last1
        (iter-f n
                (+ last1 (* 2 last2) (* 3 last3))
                last1 last2
                (+ 1 count))))
  (if (< n 3)
      n
      (iter-f n 2 1 0 3)))
#+END_SRC
